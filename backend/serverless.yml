service: capstone-projecct

frameworkVersion: "2"

plugins:
  # - serverless-webpack
  - serverless-iam-roles-per-function
  # - serverless-reqvalidator-plugin
  # - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    LOAN_TABLE: Loan-${self:provider.stage}
    USERID_INDEX: UserIdIndex
    IMAGE_S3_BUCKET: capstone-app-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    # AUTH_0_SECRET: "RKRnXFALiQas3WN1Mt8lZsBZZrhijNTdgT0tMJ1SclULwR3X8FC2oOrLCIXzGsqM"

functions:
  CreateRequest:
    handler: src/lambda/http/createLoan.createLoanRequest
    events:
      - http:
          method: post
          path: loan
          cors: true
          # auth: none
          # authorizer: RS256Auth
          # reqValidatorName: RequestBodyValidator
          # documentation:
          #   summary: Create Todo
          #   description: Create Todo
          #   requestModels:
          #     "application/json": CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOAN_TABLE}

  GetLoans:
    handler: src/lambda/http/getLoans.getAllLoans
    events:
      - http:
          method: get
          path: loan
          cors: true
          # auth: none
          # authorizer: RS256Auth
          # reqValidatorName: RequestBodyValidator
          # documentation:
          #   summary: Create Todo
          #   description: Create Todo
          #   requestModels:
          #     "application/json": CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOAN_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOAN_TABLE}/index/${self:provider.environment.USERID_INDEX}

  UpdateLoan:
    handler: src/lambda/http/updateLoan.updateLoan
    events:
      - http:
          method: patch
          path: loan/{loanId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOAN_TABLE}

  DeleteLoans:
    handler: src/lambda/http/deleteLoan.deleteLoan
    events:
      - http:
          method: delete
          path: loan/{loanId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOAN_TABLE}

  ImageUpload:
    handler: src/lambda/http/imageUpload.imageUpload
    events:
      - http:
          method: post
          path: loan/{loanId}/image
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOAN_TABLE}

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    # Set correct CORS headers incase auth fails

    # RequestBodyValidator:
    #   Type: AWS::ApiGateway::RequestValidator
    #   Properties:
    #     Name: "request-body-validator"
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     ValidateRequestBody: true
    #     ValidateRequestParameters: false

    # GatewayResponseDefault4XX:
    #   Type: AWS::ApiGateway::GatewayResponse
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    #       gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    #       gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
    #     ResponseType: DEFAULT_4XX
    #     RestApiId:
    #       Ref: ApiGatewayRestApi

    LoanTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: loanId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: loanId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.LOAN_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: loanId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGE_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
